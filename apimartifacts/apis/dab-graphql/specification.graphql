directive @authorize(
  # The name of the authorization policy that determines access to the annotated resource.
  policy: String
  # Roles that are allowed to access the annotated resource.
  roles: [String!]
  # Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  apply: ApplyPolicy! = BEFORE_RESOLVER
) on
  | SCHEMA
  | OBJECT
  | FIELD_DEFINITION

# Indicates that a field is auto generated by the database.
directive @autoGenerated on
  | FIELD_DEFINITION

# When present on a field in a database table, indicates that the field is a referencing field to some field in the same/another database table.
directive @dab_referencingField on
  | FIELD_DEFINITION

# The default value to be used when creating an item.
directive @defaultValue(value: DefaultValue) on
  | FIELD_DEFINITION

# The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
directive @defer(
  # If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  label: String
  # Deferred when true.
  if: Boolean
) on
  | FRAGMENT_SPREAD
  | INLINE_FRAGMENT

# A directive to indicate the type maps to a storable entity not a nested entity.
directive @model(
  # Underlying name of the database entity.
  name: String
) on
  | OBJECT
  | FIELD_DEFINITION

# The `@oneOf` directive is used within the type system definition language
#  to indicate:
#  - an Input Object is a Oneof Input Object, or
#  - an Object Type's Field is a Oneof Field.
directive @oneOf on
  | INPUT_OBJECT

# A directive to indicate the primary key field of an item.
directive @primaryKey(
  # The underlying database type.
  databaseType: String
) on
  | FIELD_DEFINITION

# A directive to indicate the relationship between two tables
directive @relationship(
  # The name of the GraphQL type the relationship targets
  target: String
  # The relationship cardinality
  cardinality: String
) on
  | FIELD_DEFINITION
  | INPUT_FIELD_DEFINITION

# The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions.
directive @specifiedBy(
  # The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  url: String!
) on
  | SCALAR

# The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
directive @stream(
  # If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  label: String
  # The initial elements that shall be send down to the consumer.
  initialCount: Int! = 0
  # Streamed when true.
  if: Boolean
) on
  | FIELD

schema {
  query: Query
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

# The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255.
scalar Byte

scalar ByteArray

# Input type for adding ByteArray filters
input ByteArrayFilterInput {
  # Is null test
  isNull: Boolean
}

# The `DateTime` scalar represents an ISO-8601 compliant date time type.
scalar DateTime

# Input type for adding DateTime filters
input DateTimeFilterInput {
  # Equals
  eq: DateTime
  # Greater Than
  gt: DateTime
  # Greater Than or Equal To
  gte: DateTime
  # Less Than
  lt: DateTime
  # Less Than or Equal To
  lte: DateTime
  # Not Equals
  neq: DateTime
  # Not null test
  isNull: Boolean
}

type DbOperationResult {
  # Contains result for mutation execution
  result: String
}

# The built-in `Decimal` scalar type.
scalar Decimal

# Input type for adding Decimal filters
input DecimalFilterInput {
  # Equals
  eq: Decimal
  # Greater Than
  gt: Decimal
  # Greater Than or Equal To
  gte: Decimal
  # Less Than
  lt: Decimal
  # Less Than or Equal To
  lte: Decimal
  # Not Equals
  neq: Decimal
  # Not null test
  isNull: Boolean
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
  LocalTime: LocalTime
}

# Input type for adding Int filters
input IntFilterInput {
  # Equals
  eq: Int
  # Greater Than
  gt: Int
  # Greater Than or Equal To
  gte: Int
  # Less Than
  lt: Int
  # Less Than or Equal To
  lte: Int
  # Not Equals
  neq: Int
  # Not null test
  isNull: Boolean
}

# LocalTime is an immutable struct representing a time of day, with no reference to a particular calendar, time zone or date.
scalar LocalTime

# The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

enum OrderBy {
  ASC
  DESC
}

type Product {
  ProductID: Int!
  Name: String!
  ProductNumber: String!
  Color: String
  StandardCost: Decimal!
  ListPrice: Decimal!
  Size: String
  Weight: Decimal
  ProductCategoryID: Int
  ProductModelID: Int
  SellStartDate: DateTime!
  SellEndDate: DateTime
  DiscontinuedDate: DateTime
  ThumbNailPhoto: ByteArray
  ThumbnailPhotoFileName: String
  rowguid: UUID!
  ModifiedDate: DateTime!
}

# The return object from a filter query that supports a pagination token for paging through results
type ProductConnection {
  # The list of items that matched the filter
  items: [Product!]!
  # A pagination token to provide to subsequent pages of a query
  endCursor: String
  # Indicates if there are more pages of items to return
  hasNextPage: Boolean!
}

# Filter input for Product GraphQL type
input ProductFilterInput {
  # Filter options for ProductID
  ProductID: IntFilterInput
  # Filter options for Name
  Name: StringFilterInput
  # Filter options for ProductNumber
  ProductNumber: StringFilterInput
  # Filter options for Color
  Color: StringFilterInput
  # Filter options for StandardCost
  StandardCost: DecimalFilterInput
  # Filter options for ListPrice
  ListPrice: DecimalFilterInput
  # Filter options for Size
  Size: StringFilterInput
  # Filter options for Weight
  Weight: DecimalFilterInput
  # Filter options for ProductCategoryID
  ProductCategoryID: IntFilterInput
  # Filter options for ProductModelID
  ProductModelID: IntFilterInput
  # Filter options for SellStartDate
  SellStartDate: DateTimeFilterInput
  # Filter options for SellEndDate
  SellEndDate: DateTimeFilterInput
  # Filter options for DiscontinuedDate
  DiscontinuedDate: DateTimeFilterInput
  # Filter options for ThumbNailPhoto
  ThumbNailPhoto: ByteArrayFilterInput
  # Filter options for ThumbnailPhotoFileName
  ThumbnailPhotoFileName: StringFilterInput
  # Filter options for rowguid
  rowguid: UuidFilterInput
  # Filter options for ModifiedDate
  ModifiedDate: DateTimeFilterInput
  # Conditions to be treated as AND operations
  and: [ProductFilterInput]
  # Conditions to be treated as OR operations
  or: [ProductFilterInput]
}

# Order by input for Product GraphQL type
input ProductOrderByInput {
  # Order by options for ProductID
  ProductID: OrderBy
  # Order by options for Name
  Name: OrderBy
  # Order by options for ProductNumber
  ProductNumber: OrderBy
  # Order by options for Color
  Color: OrderBy
  # Order by options for StandardCost
  StandardCost: OrderBy
  # Order by options for ListPrice
  ListPrice: OrderBy
  # Order by options for Size
  Size: OrderBy
  # Order by options for Weight
  Weight: OrderBy
  # Order by options for ProductCategoryID
  ProductCategoryID: OrderBy
  # Order by options for ProductModelID
  ProductModelID: OrderBy
  # Order by options for SellStartDate
  SellStartDate: OrderBy
  # Order by options for SellEndDate
  SellEndDate: OrderBy
  # Order by options for DiscontinuedDate
  DiscontinuedDate: OrderBy
  # Order by options for ThumbNailPhoto
  ThumbNailPhoto: OrderBy
  # Order by options for ThumbnailPhotoFileName
  ThumbnailPhotoFileName: OrderBy
  # Order by options for rowguid
  rowguid: OrderBy
  # Order by options for ModifiedDate
  ModifiedDate: OrderBy
  # Conditions to be treated as AND operations
  and: [ProductOrderByInput]
  # Conditions to be treated as OR operations
  or: [ProductOrderByInput]
}

type Query {
  # Get a list of all the Product items from the database
  products(
    # The number of items to return from the page start point
    first: Int
    # A pagination token from a previous query to continue through a paginated list
    after: String
    # Filter options for query
    filter: ProductFilterInput
    # Ordering options for query
    orderBy: ProductOrderByInput
  ): ProductConnection!
  # Get a Product from the database by its ID/primary key
  product_by_pk(ProductID: Int!): Product
}

# The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1.
scalar Short

# IEEE 754 32 bit float
scalar Single

# Input type for adding String filters
input StringFilterInput {
  # Equals
  eq: String
  # Contains
  contains: String
  # Not Contains
  notContains: String
  # Starts With
  startsWith: String
  # Ends With
  endsWith: String
  # Not Equals
  neq: String
  # Case Insensitive
  caseInsensitive: Boolean = false
  # Is null test
  isNull: Boolean
}

scalar UUID

# Input type for adding Uuid filters
input UuidFilterInput {
  # Equals
  eq: UUID
  # Contains
  contains: UUID
  # Not Contains
  notContains: UUID
  # Starts With
  startsWith: UUID
  # Ends With
  endsWith: UUID
  # Not Equals
  neq: UUID
  # Case Insensitive
  caseInsensitive: Boolean = false
  # Is null test
  isNull: Boolean
}
